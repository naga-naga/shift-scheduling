solve([2, 2, 2, 2, 2, 3, 3], [[1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1]], 7, S).
solve([2, 2, 2, 2, 2, 3, 3], [[1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1]], S).

employee([2, 2, 2, 2, 2, 3, 3], After, [1, 1, 1, 0, 1, 1, 1], 1, Shift).

less_than_max_days([1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0], 3, 3, 7).

% シフトが最大連勤日数以下かどうかを調べる
% 最後まで失敗しなければ成功
less_than_max_days(_, _, _, _, 0).
% 最大日数以上の1が並んでいる場合は失敗
less_than_max_days(WeeklyShift, [ShiftToday | Shift], OriginalMaxDays, MaxDays, Loop) :-
    Loop > 0,
    ShiftToday = 1,
    MaxDays2 is MaxDays - 1,
    MaxDays2 < 0,
    fail.
% 最大日数以下で1を見つけた場合は次の日を見る
less_than_max_days(WeeklyShift, [ShiftToday | Shift], OriginalMaxDays, MaxDays, Loop) :-
    Loop > 0,
    ShiftToday = 1,
    MaxDays2 is MaxDays - 1,
    MaxDays2 >= 0,
    less_than_max_days(WeeklyShift, Shift, OriginalMaxDays, MaxDays2, Loop).
% 0を見つけたらシフトの順番を入れ替えて最大日数以下かどうかを調べる
less_than_max_days(WeeklyShift, [ShiftToday | Shift], OriginalMaxDays, MaxDays, Loop) :-
    Loop > 0,
    ShiftToday = 0,
    Loop2 is Loop - 1,
    bring_head_to_last(WeeklyShift, ChangedShift),
    less_than_max_days(ChangedShift, ChangedShift, OriginalMaxDays, OriginalMaxDays, Loop2).

bring_head_to_last([Head | Tail], NewList) :-
    append(Tail, [Head], NewList).